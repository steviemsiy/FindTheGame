{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","littlebits-frontend/tests/app.lint-test.js","littlebits-frontend/tests/helpers/destroy-app.js","littlebits-frontend/tests/helpers/module-for-acceptance.js","littlebits-frontend/tests/helpers/resolver.js","littlebits-frontend/tests/helpers/start-app.js","littlebits-frontend/tests/integration/components/group-list-test.js","littlebits-frontend/tests/integration/helpers/check-membership-test.js","littlebits-frontend/tests/test-helper.js","littlebits-frontend/tests/tests.lint-test.js","littlebits-frontend/tests/unit/controllers/application-test.js","littlebits-frontend/tests/unit/controllers/create-game-test.js","littlebits-frontend/tests/unit/controllers/game-list-test.js","littlebits-frontend/tests/unit/controllers/group-list-test.js","littlebits-frontend/tests/unit/controllers/index-test.js","littlebits-frontend/tests/unit/controllers/login-test.js","littlebits-frontend/tests/unit/controllers/register-test.js","littlebits-frontend/tests/unit/controllers/show-game-test.js","littlebits-frontend/tests/unit/controllers/show-group-test.js","littlebits-frontend/tests/unit/controllers/startgroup-test.js","littlebits-frontend/tests/unit/initializers/auth-manager-test.js","littlebits-frontend/tests/unit/initializers/constants-test.js","littlebits-frontend/tests/unit/routes/create-game-test.js","littlebits-frontend/tests/unit/routes/game-list-test.js","littlebits-frontend/tests/unit/routes/group-list-test.js","littlebits-frontend/tests/unit/routes/index-test.js","littlebits-frontend/tests/unit/routes/login-test.js","littlebits-frontend/tests/unit/routes/player-list-test.js","littlebits-frontend/tests/unit/routes/register-test.js","littlebits-frontend/tests/unit/routes/show-game-test.js","littlebits-frontend/tests/unit/routes/show-group-test.js","littlebits-frontend/tests/unit/routes/show-player-test.js","littlebits-frontend/tests/unit/routes/startgroup-test.js","littlebits-frontend/tests/unit/services/auth-manager-test.js","littlebits-frontend/tests/unit/services/constants-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('littlebits-frontend/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/group-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/group-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass ESLint\\n\\n32:11 - Unexpected console statement. (no-console)\\n33:11 - Unexpected console statement. (no-console)\\n46:7 - Unexpected console statement. (no-console)\\n55:11 - Unexpected console statement. (no-console)\\n56:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/create-game.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/create-game.js should pass ESLint\\n\\n14:7 - Unexpected console statement. (no-console)\\n15:7 - Unexpected console statement. (no-console)\\n24:11 - Unexpected console statement. (no-console)\\n25:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/game-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/game-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/group-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/group-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/register.js should pass ESLint\\n\\n15:7 - Unexpected console statement. (no-console)\\n16:7 - Unexpected console statement. (no-console)\\n25:11 - Unexpected console statement. (no-console)\\n26:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/show-game.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/show-game.js should pass ESLint\\n\\n6:7 - Unexpected console statement. (no-console)\\n7:7 - Unexpected console statement. (no-console)\\n20:11 - Unexpected console statement. (no-console)\\n21:11 - Unexpected console statement. (no-console)\\n26:7 - Unexpected console statement. (no-console)\\n27:7 - Unexpected console statement. (no-console)\\n40:11 - Unexpected console statement. (no-console)\\n41:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/show-group.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/show-group.js should pass ESLint\\n\\n6:7 - Unexpected console statement. (no-console)\\n7:7 - Unexpected console statement. (no-console)\\n20:11 - Unexpected console statement. (no-console)\\n21:11 - Unexpected console statement. (no-console)\\n26:7 - Unexpected console statement. (no-console)\\n27:7 - Unexpected console statement. (no-console)\\n40:11 - Unexpected console statement. (no-console)\\n41:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/startgroup.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/startgroup.js should pass ESLint\\n\\n10:7 - Unexpected console statement. (no-console)\\n19:11 - Unexpected console statement. (no-console)\\n20:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('helpers/check-membership.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/check-membership.js should pass ESLint\\n\\n5:3 - Unexpected console statement. (no-console)\\n11:7 - \\'result\\' is assigned a value but never used. (no-unused-vars)\\n12:3 - Unexpected console statement. (no-console)\\n21:7 - Unexpected console statement. (no-console)\\n22:7 - Unexpected console statement. (no-console)\\n35:5 - Unexpected console statement. (no-console)\\n38:3 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('initializers/auth-manager.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/auth-manager.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/constants.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/constants.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/create-game.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/create-game.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/game-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/game-list.js should pass ESLint\\n\\n5:9 - \\'items\\' is assigned a value but never used. (no-unused-vars)\\n6:5 - Unexpected console statement. (no-console)\\n8:7 - Unexpected console statement. (no-console)\\n11:7 - Unexpected console statement. (no-console)\\n12:7 - Unexpected console statement. (no-console)\\n16:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/group-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/group-list.js should pass ESLint\\n\\n21:9 - \\'isMember\\' is assigned a value but never used. (no-unused-vars)\\n22:5 - Unexpected console statement. (no-console)\\n24:7 - Unexpected console statement. (no-console)\\n26:9 - Unexpected console statement. (no-console)\\n36:7 - Unexpected console statement. (no-console)\\n37:7 - Unexpected console statement. (no-console)\\n40:7 - Unexpected console statement. (no-console)\\n41:7 - Unexpected console statement. (no-console)\\n45:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/index.js should pass ESLint\\n\\n4:5 - \\'defaultitems\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/register.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/show-game.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/show-game.js should pass ESLint\\n\\n5:9 - \\'items\\' is assigned a value but never used. (no-unused-vars)\\n6:5 - Unexpected console statement. (no-console)\\n8:7 - Unexpected console statement. (no-console)\\n11:7 - Unexpected console statement. (no-console)\\n12:7 - Unexpected console statement. (no-console)\\n16:5 - Unexpected console statement. (no-console)\\n17:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/show-group.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/show-group.js should pass ESLint\\n\\n5:9 - \\'items\\' is assigned a value but never used. (no-unused-vars)\\n6:5 - Unexpected console statement. (no-console)\\n8:7 - Unexpected console statement. (no-console)\\n11:7 - Unexpected console statement. (no-console)\\n12:7 - Unexpected console statement. (no-console)\\n16:5 - Unexpected console statement. (no-console)\\n17:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/show-player.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/show-player.js should pass ESLint\\n\\n5:9 - \\'items\\' is assigned a value but never used. (no-unused-vars)\\n6:5 - Unexpected console statement. (no-console)\\n8:7 - Unexpected console statement. (no-console)\\n11:7 - Unexpected console statement. (no-console)\\n12:7 - Unexpected console statement. (no-console)\\n16:5 - Unexpected console statement. (no-console)\\n17:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/startgroup.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/startgroup.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/auth-manager.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/auth-manager.js should pass ESLint\\n\\n18:3 - Unexpected console statement. (no-console)\\n54:9 - Unexpected console statement. (no-console)\\n59:5 - Unexpected console statement. (no-console)\\n66:3 - Unexpected console statement. (no-console)\\n70:5 - Unexpected console statement. (no-console)\\n107:5 - Unexpected console statement. (no-console)\\n113:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('services/constants.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/constants.js should pass ESLint\\n\\n');\n  });\n});","define('littlebits-frontend/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('littlebits-frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'littlebits-frontend/tests/helpers/start-app', 'littlebits-frontend/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var Promise = Ember.RSVP.Promise;\n});","define('littlebits-frontend/tests/helpers/resolver', ['exports', 'littlebits-frontend/resolver', 'littlebits-frontend/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('littlebits-frontend/tests/helpers/start-app', ['exports', 'littlebits-frontend/app', 'littlebits-frontend/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('littlebits-frontend/tests/integration/components/group-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('group-list', 'Integration | Component | group list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"lNm7ST9e\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"group-list\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"j0bOejRJ\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"group-list\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('littlebits-frontend/tests/integration/helpers/check-membership-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('check-membership', 'helper:check-membership', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"u1RsvcZo\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"check-membership\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('littlebits-frontend/tests/test-helper', ['littlebits-frontend/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('littlebits-frontend/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/group-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/group-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/check-membership-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/check-membership-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/create-game-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/create-game-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/game-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/game-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/group-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/group-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/show-game-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/show-game-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/show-group-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/show-group-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/startgroup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/startgroup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/auth-manager-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/auth-manager-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/constants-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/constants-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/create-game-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/create-game-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/game-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/game-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/group-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/group-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/player-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/player-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/show-game-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/show-game-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/show-group-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/show-group-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/show-player-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/show-player-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/startgroup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/startgroup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/auth-manager-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/auth-manager-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/constants-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/constants-test.js should pass ESLint\\n\\n');\n  });\n});","define('littlebits-frontend/tests/unit/controllers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('littlebits-frontend/tests/unit/controllers/create-game-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:create-game', 'Unit | Controller | create game', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('littlebits-frontend/tests/unit/controllers/game-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:game-list', 'Unit | Controller | game list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('littlebits-frontend/tests/unit/controllers/group-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:group-list', 'Unit | Controller | group list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('littlebits-frontend/tests/unit/controllers/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:index', 'Unit | Controller | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('littlebits-frontend/tests/unit/controllers/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:login', 'Unit | Controller | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('littlebits-frontend/tests/unit/controllers/register-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:register', 'Unit | Controller | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('littlebits-frontend/tests/unit/controllers/show-game-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:show-game', 'Unit | Controller | show game', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('littlebits-frontend/tests/unit/controllers/show-group-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:show-group', 'Unit | Controller | show group', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('littlebits-frontend/tests/unit/controllers/startgroup-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:startgroup', 'Unit | Controller | startgroup', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('littlebits-frontend/tests/unit/initializers/auth-manager-test', ['littlebits-frontend/initializers/auth-manager', 'qunit', 'littlebits-frontend/tests/helpers/destroy-app'], function (_authManager, _qunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Initializer | auth manager', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      Ember.run(function () {\n        _this.application = Ember.Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _authManager.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('littlebits-frontend/tests/unit/initializers/constants-test', ['littlebits-frontend/initializers/constants', 'qunit', 'littlebits-frontend/tests/helpers/destroy-app'], function (_constants, _qunit, _destroyApp) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Initializer | constants', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      Ember.run(function () {\n        _this.application = Ember.Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _constants.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('littlebits-frontend/tests/unit/routes/create-game-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:create-game', 'Unit | Route | create game', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('littlebits-frontend/tests/unit/routes/game-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:game-list', 'Unit | Route | game list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('littlebits-frontend/tests/unit/routes/group-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:group-list', 'Unit | Route | group list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('littlebits-frontend/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('littlebits-frontend/tests/unit/routes/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('littlebits-frontend/tests/unit/routes/player-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:player-list', 'Unit | Route | player list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('littlebits-frontend/tests/unit/routes/register-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:register', 'Unit | Route | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('littlebits-frontend/tests/unit/routes/show-game-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:show-game', 'Unit | Route | show game', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('littlebits-frontend/tests/unit/routes/show-group-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:show-group', 'Unit | Route | show group', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('littlebits-frontend/tests/unit/routes/show-player-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:show-player', 'Unit | Route | show player', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('littlebits-frontend/tests/unit/routes/startgroup-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:startgroup', 'Unit | Route | startgroup', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('littlebits-frontend/tests/unit/services/auth-manager-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:auth-manager', 'Unit | Service | auth manager', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('littlebits-frontend/tests/unit/services/constants-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:constants', 'Unit | Service | constants', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('littlebits-frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingspJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvfile":"tests.js"}